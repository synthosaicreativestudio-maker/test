"""Miniapp: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Telegram Mini App
—á–µ—Ä–µ–∑ web_app_data –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
"""
import json
import logging
from typing import Dict, Any

logger = logging.getLogger(__name__)


def parse_webapp_data(data: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram Mini App."""
    try:
        return json.loads(data)
    except json.JSONDecodeError:
        logger.error(f"Failed to parse webapp data: {data}")
        return {}


def setup(dp):
    try:
        from aiogram import types, F
        from src.miniapps.auth import find_and_mark_authorization
    except Exception as e:
        logger.error(f"Failed to import dependencies: {e}")
        return

    async def handle_webapp_data(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App."""
        if not message.web_app_data:
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
            webapp_data = parse_webapp_data(message.web_app_data.data)
            
            if not webapp_data:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            code = webapp_data.get('code')
            phone = webapp_data.get('phone')
            user_id = webapp_data.get('user_id') or message.from_user.id
            first_name = webapp_data.get('first_name') or message.from_user.first_name
            
            if not code or not phone:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
                return
            
            logger.info(f"Mini App auth attempt: user_id={user_id}, code={code}, phone={phone}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            success, result_message = find_and_mark_authorization(code, phone, user_id)
            
            if success:
                welcome_msg = f"‚úÖ {result_message}\\n\\n"
                welcome_msg += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! üéâ\\n"
                welcome_msg += "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="employee_profile")],
                    [types.InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_ticket")],
                    [types.InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_tickets")]
                ])
                
                await message.reply(welcome_msg, reply_markup=keyboard)
                
            else:
                error_msg = f"‚ùå {result_message}\\n\\n"
                error_msg += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="auth_retry")]
                ])
                
                await message.reply(error_msg, reply_markup=keyboard)
                
        except Exception as e:
            logger.error(f"Error processing webapp data: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_auth_retry(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Mini App —Å–Ω–æ–≤–∞
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 
                web_app=types.WebAppInfo(url="https://synthosaicreativestudio-maker.github.io/marketing/auth.html")
            )]
        ])
        
        await callback.message.edit_text(
            "üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=keyboard
        )
        
        await callback.answer()

    async def handle_employee_actions(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
        action = callback.data
        
        if action == "employee_profile":
            await callback.message.edit_text(
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\\n"
                f"ID: {callback.from_user.id}\\n"
                f"–ò–º—è: {callback.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\\n"
                f"Username: @{callback.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n"
                f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            )
        
        elif action == "create_ticket":
            await callback.message.edit_text(
                "üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏\\n\\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\\n"
                "/ticket <–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã>\\n\\n"
                "–ü—Ä–∏–º–µ—Ä: /ticket –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –≤ –æ—Ñ–∏—Å–µ"
            )
        
        elif action == "my_tickets":
            await callback.message.edit_text(
                "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏\\n\\n"
                "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏.\\n"
                "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
            )
        
        await callback.answer()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(handle_webapp_data, F.web_app_data)
    dp.callback_query.register(handle_auth_retry, lambda c: c.data == "auth_retry")
    dp.callback_query.register(handle_employee_actions, lambda c: c.data in ["employee_profile", "create_ticket", "my_tickets"])