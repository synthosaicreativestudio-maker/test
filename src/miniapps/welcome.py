"""–ú–∏–Ω–∏–∞–ø–ø: –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ Mini App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è.

–û–±—Ä–∞–±–æ—Ç—á–∏–∫ `/start` –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π
–∑–∞–ø—É—Å–∫–∞ Telegram Mini App –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
"""
import os

def format_name(first_name: str = None, last_name: str = None, username: str = None) -> str:
    """–í–µ—Ä–Ω—É—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    parts = []
    if first_name:
        parts.append(first_name)
    if last_name:
        # –ï—Å–ª–∏ last_name —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å first_name –∏–ª–∏ –ø—É—Å—Ç, –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
        if last_name not in parts:
            parts.append(last_name)
    if parts:
        return ' '.join(parts)
    if username:
        return username
    return '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'


def load_env_var(key: str, default: str = "") -> str:
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏–∑ env —Ñ–∞–π–ª–∞ –∏–ª–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    value = os.environ.get(key)
    if value:
        return value
    
    # –ï—Å–ª–∏ –Ω–µ—Ç, —á–∏—Ç–∞–µ–º –∏–∑ env —Ñ–∞–π–ª–∞
    try:
        with open('env', 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line.startswith(f'{key}='):
                    return line.split('=', 1)[1].strip('"\'')
    except FileNotFoundError:
        pass
    
    return default


def setup(dp):
    try:
        from aiogram import types
        from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
        from aiogram.filters.command import Command
    except Exception:
        return

    async def cmd_start(message: types.Message):
        u = message.from_user
        name = format_name(getattr(u, 'first_name', None), getattr(u, 'last_name', None), getattr(u, 'username', None))
        
        # –ü–æ–ª—É—á–∞–µ–º URL Mini App –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        miniapp_url = load_env_var('WEB_APP_AUTH_URL', 'https://synthosaicreativestudio-maker.github.io/marketing/auth_universal.html')
        
        text = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {name}! üëã\n\n"
        text += "üîê –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.\n\n"
        text += "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ä–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."
        
        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å Mini App –∫–Ω–æ–ø–∫–æ–π
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(
                    text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞",
                    web_app=WebAppInfo(url=miniapp_url)
                )],
                [KeyboardButton(text="‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ")],
                [KeyboardButton(text="üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞")]
            ],
            resize_keyboard=True,
            one_time_keyboard=False
        )
        
        await message.reply(text, reply_markup=keyboard)

    async def handle_text_messages(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è reply –∫–Ω–æ–ø–æ–∫."""
        text = message.text
        
        if text == "‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ":
            info_text = (
                "üìã **–û —Å–∏—Å—Ç–µ–º–µ**\n\n"
                "–≠—Ç–æ —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.\n\n"
                "**–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                "‚Ä¢ üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤\n"
                "‚Ä¢ üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞—è–≤–æ–∫\n"
                "‚Ä¢ üìä –ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏\n"
                "‚Ä¢ üì± –£–¥–æ–±–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Mini App\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
            )
            await message.reply(info_text, parse_mode="Markdown")
            
        elif text == "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞":
            support_text = (
                "üìû **–°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏**\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏–ª–∏ —Ä–∞–±–æ—Ç–æ–π —Å–∏—Å—Ç–µ–º—ã, "
                "–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É:\n\n"
                "üìß Email: support@company.com\n"
                "üì± –¢–µ–ª–µ—Ñ–æ–Ω: +7 (XXX) XXX-XX-XX\n\n"
                "–ú—ã –ø–æ–º–æ–∂–µ–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã! ü§ù"
            )
            await message.reply(support_text, parse_mode="Markdown")

    dp.message.register(cmd_start, Command(commands=['start']))
    dp.message.register(handle_text_messages, lambda message: message.text in ["‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ", "üìû –ü–æ–¥–¥–µ—Ä–∂–∫–∞"])
