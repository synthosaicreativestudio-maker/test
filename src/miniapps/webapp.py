"""Miniapp: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.

–≠—Ç–æ—Ç –º–æ–¥—É–ª—å –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –∏–∑ Telegram Mini App
—á–µ—Ä–µ–∑ web_app_data –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.
"""
import json
import logging
import os
import csv
import io
import urllib.request
from typing import Dict, Any, Optional, Tuple

logger = logging.getLogger(__name__)


def validate_employee_code(code: str) -> bool:
    return code.isdigit() and len(code) > 0


def validate_phone(phone: str) -> bool:
    # –û–∂–∏–¥–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 8XXXXXXXXXX (11 —Ü–∏—Ñ—Ä, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8)
    if not phone or not phone.isdigit():
        return False
    return len(phone) == 11 and phone.startswith('8')


def find_row_in_sheet_local(csv_text: str, code: str, phone: str) -> Optional[int]:
    """–ò—â–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ CSV –ø–æ –æ–±–æ–∏–º –ø–æ–ª—è–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω–¥–µ–∫—Å (1-based) —Å—Ç—Ä–æ–∫–∏ –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ."""
    reader = csv.reader(io.StringIO(csv_text))
    for idx, row in enumerate(reader, start=1):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–±–∞ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
        if code in row and phone in row:
            return idx
    return None


def try_fetch_public_csv(sheet_id: str) -> Optional[str]:
    """–ü—ã—Ç–∞–µ—Ç—Å—è —Å–∫–∞—á–∞—Ç—å –ø—É–±–ª–∏—á–Ω—É—é –≤–µ—Ä—Å–∏—é —Ç–∞–±–ª–∏—Ü—ã –≤ CSV (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)."""
    try:
        url = f"https://docs.google.com/spreadsheets/d/{sheet_id}/export?format=csv"
        with urllib.request.urlopen(url, timeout=10) as resp:
            return resp.read().decode('utf-8')
    except Exception:
        return None


def update_sheet_with_gspread(sheet_id: str, row_index: int, telegram_id: int) -> Tuple[bool, str]:
    """–ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã D (4) –∏ E (5) —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ —á–µ—Ä–µ–∑ gspread.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ).
    """
    try:
        import gspread
        from google.oauth2.service_account import Credentials
    except Exception as e:
        return False, f"gspread –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω: {e}"

    sa_file = os.environ.get('GOOGLE_SERVICE_ACCOUNT_FILE') or os.getenv('GOOGLE_SERVICE_ACCOUNT_FILE') or ''
    if not sa_file or not os.path.exists(sa_file):
        return False, 'Service account JSON –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–∫–∞–∂–∏—Ç–µ GOOGLE_SERVICE_ACCOUNT_FILE –≤ env.'

    try:
        creds = Credentials.from_service_account_file(sa_file, scopes=['https://www.googleapis.com/auth/spreadsheets'])
        gc = gspread.authorize(creds)
        sh = gc.open_by_key(sheet_id)
        ws = sh.sheet1
        # –ó–∞–ø–∏—Å–∞—Ç—å –≤ D –∏ E —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        ws.update_cell(row_index, 4, '–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω')
        ws.update_cell(row_index, 5, str(telegram_id))
        return True, '–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤ Google Sheets'
    except Exception as e:
        return False, f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ Google Sheets: {e}'


def append_general_log(message: str):
    try:
        from datetime import datetime
        path = os.path.join(os.getcwd(), 'logs', 'general_log.md')
        with open(path, 'a', encoding='utf-8') as f:
            ts = datetime.now().astimezone().isoformat()
            f.write(f"\n---\n–î–∞—Ç–∞: {ts}\n–ê–≤—Ç–æ—Ä: –°–∏—Å—Ç–µ–º–∞\n–î–µ–π—Å—Ç–≤–∏–µ: log\n–°–æ–æ–±—â–µ–Ω–∏–µ: {message}\n---\n")
    except Exception:
        pass


def find_and_mark_authorization(code: str, phone: str, telegram_id: int) -> Tuple[bool, str]:
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞: –∏—â–µ–º –∫–æ–¥+—Ç–µ–ª–µ—Ñ–æ–Ω –∏ –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–º–µ—Ç–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.

    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (—É—Å–ø–µ—Ö, —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è).
    """
    sheet_id = os.environ.get('SHEET_ID')
    if not sheet_id:
        return False, '–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SHEET_ID –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.'

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—É—é CSV
    csv_text = try_fetch_public_csv(sheet_id)
    row_idx = None
    if csv_text:
        row_idx = find_row_in_sheet_local(csv_text, code, phone)

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –ø—É–±–ª–∏—á–Ω–æ–π –≤–µ—Ä—Å–∏–∏, –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gspread –Ω–∞ –ø–æ–ª–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    if row_idx is None:
        # –ï—Å–ª–∏ gspread –¥–æ—Å—Ç—É–ø–µ–Ω –∏ service account –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ –∏—Å–∫–∞—Ç—å
        try:
            import gspread
            from google.oauth2.service_account import Credentials
            sa_file = os.environ.get('GOOGLE_SERVICE_ACCOUNT_FILE')
            if sa_file and os.path.exists(sa_file):
                creds = Credentials.from_service_account_file(sa_file, scopes=['https://www.googleapis.com/auth/spreadsheets'])
                gc = gspread.authorize(creds)
                sh = gc.open_by_key(sheet_id)
                ws = sh.sheet1
                all_values = ws.get_all_values()
                for idx, row in enumerate(all_values, start=1):
                    if code in row and phone in row:
                        row_idx = idx
                        break
        except Exception:
            # –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å gspread
            pass

    if row_idx is None:
        append_general_log(f'–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è code={code} phone={phone} telegram_id={telegram_id}')
        return False, '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω'

    # –ü–æ–ø—ã—Ç–∞—Ç—å—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —á–µ—Ä–µ–∑ gspread
    ok, msg = update_sheet_with_gspread(sheet_id, row_idx, telegram_id)
    if ok:
        append_general_log(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: code={code} phone={phone} telegram_id={telegram_id} row={row_idx}')
        return True, '–í—ã —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã'
    else:
        append_general_log(f'–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å Google Sheets: {msg}')
        # –ï—Å–ª–∏ –º—ã –Ω–∞—à–ª–∏ —Å—Ç—Ä–æ–∫—É, –Ω–æ –Ω–µ –º–æ–∂–µ–º –æ–±–Ω–æ–≤–∏—Ç—å, –≤—Å—ë —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –Ω–µ—É—Å–ø–µ—Ö–æ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        return False, f'–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: {msg}'


def parse_webapp_data(data: str) -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç Telegram Mini App."""
    try:
        return json.loads(data)
    except json.JSONDecodeError:
        logger.error(f"Failed to parse webapp data: {data}")
        return {}


def setup(dp):
    try:
        from aiogram import types, F
    except Exception as e:
        logger.error(f"Failed to import dependencies: {e}")
        return

    async def handle_webapp_data(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç Telegram Mini App."""
        if not message.web_app_data:
            return
        
        try:
            # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –æ—Ç Mini App
            webapp_data = parse_webapp_data(message.web_app_data.data)
            
            if not webapp_data:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
                return
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            code = webapp_data.get('code')
            phone = webapp_data.get('phone')
            user_id = webapp_data.get('user_id') or message.from_user.id
            first_name = webapp_data.get('first_name') or message.from_user.first_name
            
            if not code or not phone:
                await message.reply("‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–∫–∞–∑–∞–Ω –∫–æ–¥ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.")
                return
            
            logger.info(f"Mini App auth attempt: user_id={user_id}, code={code}, phone={phone}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é
            success, result_message = find_and_mark_authorization(code, phone, user_id)
            
            if success:
                welcome_msg = f"‚úÖ {result_message}\\n\\n"
                welcome_msg += f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {first_name}! üéâ\\n"
                welcome_msg += "–¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞."
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üìä –ú–æ–∏ –¥–∞–Ω–Ω—ã–µ", callback_data="employee_profile")],
                    [types.InlineKeyboardButton(text="üé´ –°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="create_ticket")],
                    [types.InlineKeyboardButton(text="üìã –ú–æ–∏ –∑–∞—è–≤–∫–∏", callback_data="my_tickets")]
                ])
                
                await message.reply(welcome_msg, reply_markup=keyboard)
                
            else:
                error_msg = f"‚ùå {result_message}\\n\\n"
                error_msg += "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                
                # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
                keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
                    [types.InlineKeyboardButton(text="üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data="auth_retry")]
                ])
                
                await message.reply(error_msg, reply_markup=keyboard)
                
        except Exception as e:
            logger.error(f"Error processing webapp data: {e}")
            await message.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_auth_retry(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏."""
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Mini App —Å–Ω–æ–≤–∞
        keyboard = types.InlineKeyboardMarkup(inline_keyboard=[
            [types.InlineKeyboardButton(
                text="üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞", 
                web_app=types.WebAppInfo(url="https://synthosaicreativestudio-maker.github.io/marketing/auth.html")
            )]
        ])
        
        await callback.message.edit_text(
            "üîê –î–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ —Ñ–æ—Ä–º—É –∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ:",
            reply_markup=keyboard
        )
        
        await callback.answer()

    async def handle_employee_actions(callback: types.CallbackQuery):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ–π—Å—Ç–≤–∏–π –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."""
        action = callback.data
        
        if action == "employee_profile":
            await callback.message.edit_text(
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞\\n"
                f"ID: {callback.from_user.id}\\n"
                f"–ò–º—è: {callback.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\\n"
                f"Username: @{callback.from_user.username or '–ù–µ —É–∫–∞–∑–∞–Ω'}\\n"
                f"–°—Ç–∞—Ç—É—Å: ‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω"
            )
        
        elif action == "create_ticket":
            await callback.message.edit_text(
                "üé´ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏\\n\\n"
                "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\\n"
                "/ticket <–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã>\\n\\n"
                "–ü—Ä–∏–º–µ—Ä: /ticket –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏–Ω—Ç–µ—Ä –≤ –æ—Ñ–∏—Å–µ"
            )
        
        elif action == "my_tickets":
            await callback.message.edit_text(
                "üìã –í–∞—à–∏ –∑–∞—è–≤–∫–∏\\n\\n"
                "–ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –≤–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞—è–≤–∫–∏.\\n"
                "–ü–æ–∫–∞ —É –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫."
            )
        
        await callback.answer()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.message.register(handle_webapp_data, F.web_app_data)
    dp.callback_query.register(handle_auth_retry, lambda c: c.data == "auth_retry")
    dp.callback_query.register(handle_employee_actions, lambda c: c.data in ["employee_profile", "create_ticket", "my_tickets"])